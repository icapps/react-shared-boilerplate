// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TouchableFeedback> component <TouchableFeedback> component for Android renders a borderless ripple should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={true}
    disabled={false}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <DummyTouchableNativeFeedback
        androidContainerStyle={Object {}}
        background={Object {}}
        borderlessRipple={true}
        disabled={false}
        onPress={[Function]}
        ripple={null}
        style={Object {}}
      >
        <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>
      </DummyTouchableNativeFeedback>,
      "style": Array [
        Object {},
        false,
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "androidContainerStyle": Object {},
        "background": Object {},
        "borderlessRipple": true,
        "children": <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>,
        "disabled": false,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "This is touchable!",
            "style": Object {
              "padding": 10,
            },
          },
          "ref": null,
          "rendered": "This is touchable!",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <DummyTouchableNativeFeedback
          androidContainerStyle={Object {}}
          background={Object {}}
          borderlessRipple={true}
          disabled={false}
          onPress={[Function]}
          ripple={null}
          style={Object {}}
        >
          <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>
        </DummyTouchableNativeFeedback>,
        "style": Array [
          Object {},
          false,
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "androidContainerStyle": Object {},
          "background": Object {},
          "borderlessRipple": true,
          "children": <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>,
          "disabled": false,
          "onPress": [Function],
          "ripple": null,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>,
            "style": Object {},
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "This is touchable!",
              "style": Object {
                "padding": 10,
              },
            },
            "ref": null,
            "rendered": "This is touchable!",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for Android renders a custom ripple should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={false}
    disabled={false}
    onPress={[Function]}
    ripple={Object {}}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <DummyTouchableNativeFeedback
        androidContainerStyle={Object {}}
        background={Object {}}
        borderlessRipple={false}
        disabled={false}
        onPress={[Function]}
        ripple={Object {}}
        style={Object {}}
      >
        <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>
      </DummyTouchableNativeFeedback>,
      "style": Array [
        Object {},
        Object {
          "overflow": "hidden",
        },
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "androidContainerStyle": Object {},
        "background": Object {},
        "borderlessRipple": false,
        "children": <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>,
        "disabled": false,
        "onPress": [Function],
        "ripple": Object {},
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "This is touchable!",
            "style": Object {
              "padding": 10,
            },
          },
          "ref": null,
          "rendered": "This is touchable!",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <DummyTouchableNativeFeedback
          androidContainerStyle={Object {}}
          background={Object {}}
          borderlessRipple={false}
          disabled={false}
          onPress={[Function]}
          ripple={Object {}}
          style={Object {}}
        >
          <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>
        </DummyTouchableNativeFeedback>,
        "style": Array [
          Object {},
          Object {
            "overflow": "hidden",
          },
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "androidContainerStyle": Object {},
          "background": Object {},
          "borderlessRipple": false,
          "children": <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>,
          "disabled": false,
          "onPress": [Function],
          "ripple": Object {},
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>,
            "style": Object {},
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "This is touchable!",
              "style": Object {
                "padding": 10,
              },
            },
            "ref": null,
            "rendered": "This is touchable!",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for Android renders a disabled state should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={false}
    disabled={true}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <DummyTouchableNativeFeedback
        androidContainerStyle={Object {}}
        background={Object {}}
        borderlessRipple={false}
        disabled={true}
        onPress={[Function]}
        ripple={null}
        style={Object {}}
      >
        <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>
      </DummyTouchableNativeFeedback>,
      "style": Array [
        Object {},
        Object {
          "overflow": "hidden",
        },
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "androidContainerStyle": Object {},
        "background": Object {},
        "borderlessRipple": false,
        "children": <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>,
        "disabled": true,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "This is touchable!",
            "style": Object {
              "padding": 10,
            },
          },
          "ref": null,
          "rendered": "This is touchable!",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <DummyTouchableNativeFeedback
          androidContainerStyle={Object {}}
          background={Object {}}
          borderlessRipple={false}
          disabled={true}
          onPress={[Function]}
          ripple={null}
          style={Object {}}
        >
          <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>
        </DummyTouchableNativeFeedback>,
        "style": Array [
          Object {},
          Object {
            "overflow": "hidden",
          },
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "androidContainerStyle": Object {},
          "background": Object {},
          "borderlessRipple": false,
          "children": <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>,
          "disabled": true,
          "onPress": [Function],
          "ripple": null,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>,
            "style": Object {},
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "This is touchable!",
              "style": Object {
                "padding": 10,
              },
            },
            "ref": null,
            "rendered": "This is touchable!",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for Android renders a highLighted state should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={false}
    disabled={false}
    highLight={true}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <DummyTouchableNativeFeedback
        androidContainerStyle={Object {}}
        background={Object {}}
        borderlessRipple={false}
        disabled={false}
        highLight={true}
        onPress={[Function]}
        ripple={null}
        style={Object {}}
      >
        <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>
      </DummyTouchableNativeFeedback>,
      "style": Array [
        Object {},
        Object {
          "overflow": "hidden",
        },
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "androidContainerStyle": Object {},
        "background": Object {},
        "borderlessRipple": false,
        "children": <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>,
        "disabled": false,
        "highLight": true,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "This is touchable!",
            "style": Object {
              "padding": 10,
            },
          },
          "ref": null,
          "rendered": "This is touchable!",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <DummyTouchableNativeFeedback
          androidContainerStyle={Object {}}
          background={Object {}}
          borderlessRipple={false}
          disabled={false}
          highLight={true}
          onPress={[Function]}
          ripple={null}
          style={Object {}}
        >
          <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>
        </DummyTouchableNativeFeedback>,
        "style": Array [
          Object {},
          Object {
            "overflow": "hidden",
          },
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "androidContainerStyle": Object {},
          "background": Object {},
          "borderlessRipple": false,
          "children": <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>,
          "disabled": false,
          "highLight": true,
          "onPress": [Function],
          "ripple": null,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>,
            "style": Object {},
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "This is touchable!",
              "style": Object {
                "padding": 10,
              },
            },
            "ref": null,
            "rendered": "This is touchable!",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for Android renders the TouchableFeedback component correctly should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={false}
    disabled={false}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <DummyTouchableNativeFeedback
        androidContainerStyle={Object {}}
        background={Object {}}
        borderlessRipple={false}
        disabled={false}
        onPress={[Function]}
        ripple={null}
        style={Object {}}
      >
        <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>
      </DummyTouchableNativeFeedback>,
      "style": Array [
        Object {},
        Object {
          "overflow": "hidden",
        },
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "androidContainerStyle": Object {},
        "background": Object {},
        "borderlessRipple": false,
        "children": <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>
        </View>,
        "disabled": false,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Text
            style={
              Object {
                "padding": 10,
              }
            }
          >
            This is touchable!
          </Text>,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "This is touchable!",
            "style": Object {
              "padding": 10,
            },
          },
          "ref": null,
          "rendered": "This is touchable!",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <DummyTouchableNativeFeedback
          androidContainerStyle={Object {}}
          background={Object {}}
          borderlessRipple={false}
          disabled={false}
          onPress={[Function]}
          ripple={null}
          style={Object {}}
        >
          <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>
        </DummyTouchableNativeFeedback>,
        "style": Array [
          Object {},
          Object {
            "overflow": "hidden",
          },
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "androidContainerStyle": Object {},
          "background": Object {},
          "borderlessRipple": false,
          "children": <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>
          </View>,
          "disabled": false,
          "onPress": [Function],
          "ripple": null,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Text
              style={
                Object {
                  "padding": 10,
                }
              }
            >
              This is touchable!
            </Text>,
            "style": Object {},
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "This is touchable!",
              "style": Object {
                "padding": 10,
              },
            },
            "ref": null,
            "rendered": "This is touchable!",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for Android renders with styling in the androidContainer should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={
      Object {
        "borderRadius": 20,
      }
    }
    borderlessRipple={false}
    disabled={false}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "borderRadius": 20,
          "padding": 20,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <DummyTouchableNativeFeedback
        androidContainerStyle={
          Object {
            "borderRadius": 20,
          }
        }
        background={Object {}}
        borderlessRipple={false}
        disabled={false}
        onPress={[Function]}
        ripple={null}
        style={Object {}}
      >
        <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "borderRadius": 20,
                "padding": 20,
              }
            }
          >
            This is touchable!
          </Text>
        </View>
      </DummyTouchableNativeFeedback>,
      "style": Array [
        Object {
          "borderRadius": 20,
        },
        Object {
          "overflow": "hidden",
        },
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "androidContainerStyle": Object {
          "borderRadius": 20,
        },
        "background": Object {},
        "borderlessRipple": false,
        "children": <View
          style={Object {}}
        >
          <Text
            style={
              Object {
                "borderRadius": 20,
                "padding": 20,
              }
            }
          >
            This is touchable!
          </Text>
        </View>,
        "disabled": false,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Text
            style={
              Object {
                "borderRadius": 20,
                "padding": 20,
              }
            }
          >
            This is touchable!
          </Text>,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "This is touchable!",
            "style": Object {
              "borderRadius": 20,
              "padding": 20,
            },
          },
          "ref": null,
          "rendered": "This is touchable!",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <DummyTouchableNativeFeedback
          androidContainerStyle={
            Object {
              "borderRadius": 20,
            }
          }
          background={Object {}}
          borderlessRipple={false}
          disabled={false}
          onPress={[Function]}
          ripple={null}
          style={Object {}}
        >
          <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "borderRadius": 20,
                  "padding": 20,
                }
              }
            >
              This is touchable!
            </Text>
          </View>
        </DummyTouchableNativeFeedback>,
        "style": Array [
          Object {
            "borderRadius": 20,
          },
          Object {
            "overflow": "hidden",
          },
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "androidContainerStyle": Object {
            "borderRadius": 20,
          },
          "background": Object {},
          "borderlessRipple": false,
          "children": <View
            style={Object {}}
          >
            <Text
              style={
                Object {
                  "borderRadius": 20,
                  "padding": 20,
                }
              }
            >
              This is touchable!
            </Text>
          </View>,
          "disabled": false,
          "onPress": [Function],
          "ripple": null,
          "style": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Text
              style={
                Object {
                  "borderRadius": 20,
                  "padding": 20,
                }
              }
            >
              This is touchable!
            </Text>,
            "style": Object {},
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "This is touchable!",
              "style": Object {
                "borderRadius": 20,
                "padding": 20,
              },
            },
            "ref": null,
            "rendered": "This is touchable!",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for iOS renders a borderless ripple should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={true}
    disabled={false}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "androidContainerStyle": Object {},
      "borderlessRipple": true,
      "children": <Text
        style={
          Object {
            "padding": 10,
          }
        }
      >
        This is touchable!
      </Text>,
      "disabled": false,
      "onPress": [Function],
      "ripple": null,
      "style": Object {},
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "This is touchable!",
        "style": Object {
          "padding": 10,
        },
      },
      "ref": null,
      "rendered": "This is touchable!",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "androidContainerStyle": Object {},
        "borderlessRipple": true,
        "children": <Text
          style={
            Object {
              "padding": 10,
            }
          }
        >
          This is touchable!
        </Text>,
        "disabled": false,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "This is touchable!",
          "style": Object {
            "padding": 10,
          },
        },
        "ref": null,
        "rendered": "This is touchable!",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for iOS renders a custom ripple should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={false}
    disabled={false}
    onPress={[Function]}
    ripple={Object {}}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "androidContainerStyle": Object {},
      "borderlessRipple": false,
      "children": <Text
        style={
          Object {
            "padding": 10,
          }
        }
      >
        This is touchable!
      </Text>,
      "disabled": false,
      "onPress": [Function],
      "ripple": Object {},
      "style": Object {},
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "This is touchable!",
        "style": Object {
          "padding": 10,
        },
      },
      "ref": null,
      "rendered": "This is touchable!",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "androidContainerStyle": Object {},
        "borderlessRipple": false,
        "children": <Text
          style={
            Object {
              "padding": 10,
            }
          }
        >
          This is touchable!
        </Text>,
        "disabled": false,
        "onPress": [Function],
        "ripple": Object {},
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "This is touchable!",
          "style": Object {
            "padding": 10,
          },
        },
        "ref": null,
        "rendered": "This is touchable!",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for iOS renders a disabled state should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={false}
    disabled={true}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "androidContainerStyle": Object {},
      "borderlessRipple": false,
      "children": <Text
        style={
          Object {
            "padding": 10,
          }
        }
      >
        This is touchable!
      </Text>,
      "disabled": true,
      "onPress": [Function],
      "ripple": null,
      "style": Object {},
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "This is touchable!",
        "style": Object {
          "padding": 10,
        },
      },
      "ref": null,
      "rendered": "This is touchable!",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "androidContainerStyle": Object {},
        "borderlessRipple": false,
        "children": <Text
          style={
            Object {
              "padding": 10,
            }
          }
        >
          This is touchable!
        </Text>,
        "disabled": true,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "This is touchable!",
          "style": Object {
            "padding": 10,
          },
        },
        "ref": null,
        "rendered": "This is touchable!",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for iOS renders a highLighted state should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={false}
    disabled={false}
    highLight={true}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.85,
      "androidContainerStyle": Object {},
      "borderlessRipple": false,
      "children": <Text
        style={
          Object {
            "padding": 10,
          }
        }
      >
        This is touchable!
      </Text>,
      "delayPressOut": 100,
      "disabled": false,
      "highLight": true,
      "onPress": [Function],
      "ripple": null,
      "style": Object {},
      "underlayColor": "#efefef",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "This is touchable!",
        "style": Object {
          "padding": 10,
        },
      },
      "ref": null,
      "rendered": "This is touchable!",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.85,
        "androidContainerStyle": Object {},
        "borderlessRipple": false,
        "children": <Text
          style={
            Object {
              "padding": 10,
            }
          }
        >
          This is touchable!
        </Text>,
        "delayPressOut": 100,
        "disabled": false,
        "highLight": true,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
        "underlayColor": "#efefef",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "This is touchable!",
          "style": Object {
            "padding": 10,
          },
        },
        "ref": null,
        "rendered": "This is touchable!",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for iOS renders the TouchableFeedback component correctly should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={Object {}}
    borderlessRipple={false}
    disabled={false}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "androidContainerStyle": Object {},
      "borderlessRipple": false,
      "children": <Text
        style={
          Object {
            "padding": 10,
          }
        }
      >
        This is touchable!
      </Text>,
      "disabled": false,
      "onPress": [Function],
      "ripple": null,
      "style": Object {},
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "This is touchable!",
        "style": Object {
          "padding": 10,
        },
      },
      "ref": null,
      "rendered": "This is touchable!",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "androidContainerStyle": Object {},
        "borderlessRipple": false,
        "children": <Text
          style={
            Object {
              "padding": 10,
            }
          }
        >
          This is touchable!
        </Text>,
        "disabled": false,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "This is touchable!",
          "style": Object {
            "padding": 10,
          },
        },
        "ref": null,
        "rendered": "This is touchable!",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TouchableFeedback> component <TouchableFeedback> component for iOS renders with styling in the androidContainer should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TouchableFeedback
    androidContainerStyle={
      Object {
        "borderRadius": 20,
      }
    }
    borderlessRipple={false}
    disabled={false}
    onPress={[Function]}
    ripple={null}
    style={Object {}}
  >
    <Text
      style={
        Object {
          "borderRadius": 20,
          "padding": 20,
        }
      }
    >
      This is touchable!
    </Text>
  </TouchableFeedback>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "androidContainerStyle": Object {
        "borderRadius": 20,
      },
      "borderlessRipple": false,
      "children": <Text
        style={
          Object {
            "borderRadius": 20,
            "padding": 20,
          }
        }
      >
        This is touchable!
      </Text>,
      "disabled": false,
      "onPress": [Function],
      "ripple": null,
      "style": Object {},
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "This is touchable!",
        "style": Object {
          "borderRadius": 20,
          "padding": 20,
        },
      },
      "ref": null,
      "rendered": "This is touchable!",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "androidContainerStyle": Object {
          "borderRadius": 20,
        },
        "borderlessRipple": false,
        "children": <Text
          style={
            Object {
              "borderRadius": 20,
              "padding": 20,
            }
          }
        >
          This is touchable!
        </Text>,
        "disabled": false,
        "onPress": [Function],
        "ripple": null,
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "This is touchable!",
          "style": Object {
            "borderRadius": 20,
            "padding": 20,
          },
        },
        "ref": null,
        "rendered": "This is touchable!",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
